"use strict";(self.webpackChunkloopback_blog=self.webpackChunkloopback_blog||[]).push([[3827],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,l(l({ref:t},c),{},{components:r})):n.createElement(h,l({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={title:"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors",date:new Date("2019-08-14T00:00:00.000Z"),authors:"dhmlau",slug:"loopback4-interceptors-part2",tags:["learning","interceptor"]},l=void 0,i={permalink:"/blog/loopback4-interceptors-part2",editUrl:"https://github.com/loopbackio/loopback-blog/blog/2019/2019-08-14-learning-interceptor-part2.md",source:"@site/blog/2019/2019-08-14-learning-interceptor-part2.md",title:"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors",description:"Originally published on strongloop.com",date:"2019-08-14T00:00:00.000Z",formattedDate:"August 14, 2019",tags:[{label:"learning",permalink:"/blog/tags/learning"},{label:"interceptor",permalink:"/blog/tags/interceptor"}],readingTime:4.11,hasTruncateMarker:!0,authors:[{name:"Diana Lau",title:"LoopBack Maintainer",url:"https://github.com/dhmlau",imageURL:"https://avatars2.githubusercontent.com/u/25489897",key:"dhmlau"}],frontMatter:{title:"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors",date:"2019-08-14T00:00:00.000Z",authors:"dhmlau",slug:"loopback4-interceptors-part2",tags:["learning","interceptor"]},prevItem:{title:"Building an Online Game With LoopBack 4 - Front-end with React (Part 6)",permalink:"/blog/building-an-online-game-with-loopback-4-pt6"},nextItem:{title:"Congratulations to LoopBack, Winner of 2019 API Award for API Middleware",permalink:"/blog/loopback-2019-api-award-api-middleware"}},p={authorsImageUrls:[void 0]},s=[{value:"Let&#39;s Build a Simple Order\xa0App",id:"lets-build-a-simple-orderapp",level:2},{value:"Creating Interceptor Function for Validation",id:"creating-interceptor-function-for-validation",level:2},{value:"Apply <code>@intercept</code> Decorator at the Method Level",id:"apply-intercept-decorator-at-the-method-level",level:2},{value:"Let&#39;s Experiment!\xa0",id:"lets-experiment",level:2},{value:"Calling <code>GET /orders/count</code>",id:"calling-get-orderscount",level:3},{value:"Calling <code>POST /orders</code>",id:"calling-post-orders",level:3},{value:"Resources",id:"resources",level:2},{value:"Call to Action",id:"call-to-action",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Originally published on ",(0,o.kt)("a",{parentName:"em",href:"https://strongloop.com"},"strongloop.com"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://strongloop.com/strongblog/loopback4-interceptors-part1/"},"Previously"),", we looked at how to add a global interceptor. In this article, we are going to build an application that validates the incoming request using class level and method level interceptors\xa0"),(0,o.kt)("p",null,"For the complete application, you can go to this repo: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dhmlau/loopback4-interceptors"},"https://github.com/dhmlau/loopback4-interceptors")),(0,o.kt)("h2",{id:"lets-build-a-simple-orderapp"},"Let's Build a Simple Order\xa0App"),(0,o.kt)("p",null,"If you want to skip this part, you can check out the ",(0,o.kt)("inlineCode",{parentName:"p"},"orginal-app")," branch of this github repo: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dhmlau/loopback4-interceptors/tree/original-app"},"https://github.com/dhmlau/loopback4-interceptors/tree/original-app"),"."),(0,o.kt)("p",null,"If you want to follow along, take these steps."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Scaffold the app by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"lb4 app loopback4-interceptors --yes"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the newly created project, create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"order.json")," with the following content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n"name": "Order",\n"base": "Entity",\n"properties": {\n    "orderNum": {\n        "type": "string",\n        "id": true,\n        "required": true\n    },\n    "customerNum": {\n        "type": "string",\n        "required": true\n    },\n    "customerEmail": {\n        "type": "string",\n        "required": true\n    },\n    "total": {\n        "type": "number",\n        "required": true\n    }\n}\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the Order model by providing the above json file. Run ",(0,o.kt)("inlineCode",{parentName:"p"},"lb4 model --config order.json --yes"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a DataSource with the in-memory connector. Run ",(0,o.kt)("inlineCode",{parentName:"p"},"lb4 datasource ds"),'.  Then select "In-memory db" as the type of connector. ')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a Repository and accept all defaults by running ",(0,o.kt)("inlineCode",{parentName:"p"},"lb4 repository")," command.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, create a controller. Follow the prompts as below:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ lb4 controller\n? Controller class name: Order\nController Order will be created in src/controllers/order.controller.ts\n? What kind of controller would you like to generate? REST Controller with CRUD functions\n? What is the name of the model to use with this CRUD repository? Order\n? What is the name of your CRUD repository? OrderRepository\n? What is the type of your ID? string\n? What is the base HTTP path name of the CRUD operations? /orders\n\n   create src/controllers/order.controller.ts\n   update src/controllers/index.ts\n\nController Order was created in src/controllers/\n")),(0,o.kt)("p",null,"You now have a LoopBack application ready to run."),(0,o.kt)("h2",{id:"creating-interceptor-function-for-validation"},"Creating Interceptor Function for Validation"),(0,o.kt)("p",null,"What we're doing here is validating user inputs at the REST layer. Note that in real world, you should also consider validating data at the Repository level to ensure the validation is applied even when modifying data from places outside of controllers, e.g. tests or services running in background."),(0,o.kt)("p",null,"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"POST /order")," endpoint, we are going to validate the order before actually creating the order. The length of ",(0,o.kt)("inlineCode",{parentName:"p"},"orderNum")," has to be 6, otherwise the order is not valid. "),(0,o.kt)("p",null,"Let's define the interceptor function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"OrderController")," class\xa0just before the class is defined.\xa0"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"src/controllers/order.controller.ts"),":\xa0"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add this statement:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {intercept, Interceptor} from '@loopback/core';\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the following function to validate order. \xa0"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const validateOrder: Interceptor = async (invocationCtx, next) => {\n    console.log('log: before-', invocationCtx.methodName);\n    const order: Order = new Order();\n    if (invocationCtx.methodName == 'create')\n        Object.assign(order, invocationCtx.args[0]);\n    else if (invocationCtx.methodName == 'updateById')\n        Object.assign(order, invocationCtx.args[1]);\n\n    if (order.orderNum.length !== 6) {\n        throw new HttpErrors.InternalServerError('Invalid order number');\n    }\n   \n    const result = await next();\n    return result;\n};\n")))),(0,o.kt)("h2",{id:"apply-intercept-decorator-at-the-method-level"},"Apply ",(0,o.kt)("inlineCode",{parentName:"h2"},"@intercept")," Decorator at the Method Level"),(0,o.kt)("p",null,"After defining the interceptor function, you can now use this as a method-level or class-level decorator. For class-level interceptor, you just apply it on the class, like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@intercept(validateOrder)\nexport class OrderController {\n    //...\n}\n")),(0,o.kt)("p",null,"However, we want the validation to run only when the order is being created, so the ",(0,o.kt)("inlineCode",{parentName:"p"},"@intercept")," decorator will be applied at the method level. To do this, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"@intercept")," decorator on the method I want to intercept, i.e. the ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```ts\n@intercept(validateOrder) // <--- add here\n@post('/orders', {\n    responses: {\n    '200': {\n        description: 'Order model instance',\n        content: {'application/json': {schema: {'x-ts-type': Order}}},\n    },\n    },\n})\nasync create(@requestBody() order: Order): Promise<Order> {\n```\n")),(0,o.kt)("h2",{id:"lets-experiment"},"Let's Experiment!\xa0"),(0,o.kt)("p",null,"Now that the application is ready to go, start the app by running ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")," command and go to the API Explorer: http://localhost:3000/explorer."),(0,o.kt)("h3",{id:"calling-get-orderscount"},"Calling ",(0,o.kt)("inlineCode",{parentName:"h3"},"GET /orders/count")),(0,o.kt)("p",null,"Since this method doesn't have the interceptor, when this endpoint is being called, there shouldn't be anything printed to the log.\xa0"),(0,o.kt)("h3",{id:"calling-post-orders"},"Calling ",(0,o.kt)("inlineCode",{parentName:"h3"},"POST /orders")),(0,o.kt)("p",null,"This is the method where the interceptor is applied to validate the order. Let's give it a try with a valid order."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-\xa0"},'{\n  "orderNum": "111111",\n  "customerNum": "12345",\n  "customerEmail": "aa@abc.com",\n  "total": 100\n}\n')),(0,o.kt)("p",null,"You should expect to get the HTTP 200 response code that the order has been created successfully."),(0,o.kt)("p",null,"Now try another order with ",(0,o.kt)("inlineCode",{parentName:"p"},"orderNum")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"11"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-\xa0"},'{\n  "orderNum": "11",\n  "customerNum": "67890",\n  "customerEmail": "bb@abc.com",\n  "total": 1000\n}\n')),(0,o.kt)("p",null,'You should expect a HTTP 500 error with message saying "Internal Server Error".'),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://loopback.io/doc/en/lb4/Interceptors.html"},"Interceptor docs page")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/strongloop/loopback-next/tree/master/examples/greeting-app"},"Caching enabled via interceptors in Greeter application")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/"},"Authorization added using interceptors in this tutorial"))),(0,o.kt)("h2",{id:"call-to-action"},"Call to Action"),(0,o.kt)("p",null,"LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/strongloop/loopback-next/issues"},"Reporting issues"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md"},"Contributing"),"\ncode and documentation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/strongloop/loopback-next/labels/good%20first%20issue"},'Opening a pull request on one of our "good first issues"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/strongloop/loopback-next/issues/110"},"Joining")," our user group.")))}u.isMDXComponent=!0}}]);